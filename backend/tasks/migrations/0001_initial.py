# Generated by Django 4.2.7 on 2025-08-17 08:41

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProcessCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(default='#007bff', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Process Categories',
            },
        ),
        migrations.CreateModel(
            name='ProcessAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('process_name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('department', models.CharField(blank=True, max_length=100)),
                ('process_owner', models.CharField(blank=True, max_length=100)),
                ('repetitiveness_score', models.IntegerField(help_text='How frequently is the process executed? (1=Rarely, 5=Daily)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('repetitiveness_remarks', models.TextField(blank=True)),
                ('rule_based_score', models.IntegerField(help_text='Is the process deterministic with clear rules? (1=Requires judgment, 5=Rule-based)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('rule_based_remarks', models.TextField(blank=True)),
                ('complexity_score', models.IntegerField(help_text='Process complexity (1=Very complex, 5=Simple)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('complexity_remarks', models.TextField(blank=True)),
                ('volume_score', models.IntegerField(help_text='Transaction volume (1=Low volume, 5=High volume)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('volume_remarks', models.TextField(blank=True)),
                ('standardization_score', models.IntegerField(help_text='Input/output standardization (1=Highly variable, 5=Standardized)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('standardization_remarks', models.TextField(blank=True)),
                ('current_errors_score', models.IntegerField(help_text='Manual error rate (1=Low errors, 5=High errors)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('current_errors_remarks', models.TextField(blank=True)),
                ('total_score', models.IntegerField(editable=False)),
                ('automation_suitability', models.CharField(choices=[('not_suitable', 'Not Suitable for Automation'), ('possibly_automatable', 'Possibly Automatable'), ('highly_automatable', 'Highly Automatable')], editable=False, max_length=25)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], editable=False, max_length=10)),
                ('estimated_cost_savings', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated annual cost savings in USD', max_digits=10, null=True)),
                ('estimated_time_savings', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated time savings in hours per week', max_digits=8, null=True)),
                ('implementation_effort', models.CharField(blank=True, choices=[('low', 'Low (1-2 weeks)'), ('medium', 'Medium (1-2 months)'), ('high', 'High (3+ months)')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-total_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssessmentReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('ai_conclusion', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assessments', models.ManyToManyField(to='tasks.processassessment')),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
