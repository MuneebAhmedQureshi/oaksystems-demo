import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Button, Table, Badge, Form, Modal } from 'react-bootstrap';
import { Link } from 'react-router-dom';
import { FiPlus, FiDownload, FiEye } from 'react-icons/fi';
import api from '../services/api';
import toast from 'react-hot-toast';

const Reports = () => {
  const [reports, setReports] = useState([]);
  const [processes, setProcesses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [newReport, setNewReport] = useState({
    title: '',
    description: '',
    selectedProcesses: []
  });

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const [reportsResponse, processesResponse] = await Promise.all([
        api.get('/tasks/reports/'),
        api.get('/tasks/assessments/')
      ]);
      
      setReports(reportsResponse.data.results || reportsResponse.data);
      setProcesses(processesResponse.data.results || processesResponse.data);
    } catch (error) {
      toast.error('Failed to load data');
    } finally {
      setLoading(false);
    }
  };

  const createReport = async () => {
    if (!newReport.title || newReport.selectedProcesses.length === 0) {
      toast.error('Please provide a title and select at least one process');
      return;
    }

    try {
      const reportData = {
        title: newReport.title,
        description: newReport.description,
        assessment_ids: newReport.selectedProcesses
      };

      await api.post('/tasks/reports/', reportData);
      toast.success('Report created successfully');
      setShowCreateModal(false);
      setNewReport({ title: '', description: '', selectedProcesses: [] });
      loadData();
    } catch (error) {
      toast.error('Failed to create report');
    }
  };

  const downloadReport = async (reportId, format) => {
    try {
      const response = await api.get(`/tasks/reports/${reportId}/download/${format}/`, {
        responseType: 'blob'
      });
      
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `report_${reportId}.${format}`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
    } catch (error) {
      toast.error(`Failed to download ${format.toUpperCase()} report`);
    }
  };

  const handleProcessSelection = (processId) => {
    const isSelected = newReport.selectedProcesses.includes(processId);
    if (isSelected) {
      setNewReport({
        ...newReport,
        selectedProcesses: newReport.selectedProcesses.filter(id => id !== processId)
      });
    } else {
      setNewReport({
        ...newReport,
        selectedProcesses: [...newReport.selectedProcesses, processId]
      });
    }
  };

  if (loading) {
    return (
      <div className="loading-spinner">
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  return (
    <Container fluid>
      <Row className="mb-4">
        <Col>
          <div className="d-flex justify-content-between align-items-center">
            <div>
              <h1>Assessment Reports</h1>
              <p className="text-muted mb-0">
                Generate and manage automation assessment reports
              </p>
            </div>
            <Button 
              variant="primary" 
              size="lg"
              onClick={() => setShowCreateModal(true)}
            >
              <FiPlus className="me-2" />
              Create Report
            </Button>
          </div>
        </Col>
      </Row>

      <Card>
        <Card.Body>
          {reports.length === 0 ? (
            <div className="text-center py-5">
              <h5>No reports generated yet</h5>
              <p className="text-muted">Create your first automation assessment report</p>
              <Button 
                variant="primary"
                onClick={() => setShowCreateModal(true)}
              >
                <FiPlus className="me-2" />
                Create First Report
              </Button>
            </div>
          ) : (
            <div className="table-responsive">
              <Table hover>
                <thead>
                  <tr>
                    <th>Report Title</th>
                    <th>Processes</th>
                    <th>Highly Automatable</th>
                    <th>Possibly Automatable</th>
                    <th>Not Suitable</th>
                    <th>Generated By</th>
                    <th>Created</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {reports.map((report) => (
                    <tr key={report.id}>
                      <td>
                        <Link 
                          to={`/reports/${report.id}`}
                          className="text-decoration-none fw-bold"
                        >
                          {report.title}
                        </Link>
                      </td>
                      <td>{report.assessments?.length || 0}</td>
                      <td>
                        <Badge bg="success">{report.highly_automatable_count}</Badge>
                      </td>
                      <td>
                        <Badge bg="warning">{report.possibly_automatable_count}</Badge>
                      </td>
                      <td>
                        <Badge bg="danger">{report.not_suitable_count}</Badge>
                      </td>
                      <td>{report.generated_by_name}</td>
                      <td>
                        {new Date(report.created_at).toLocaleDateString()}
                      </td>
                      <td>
                        <div className="d-flex gap-2">
                          <Link to={`/reports/${report.id}`}>
                            <Button variant="outline-primary" size="sm">
                              <FiEye />
                            </Button>
                          </Link>
                          <Button
                            variant="outline-success"
                            size="sm"
                            onClick={() => downloadReport(report.id, 'pdf')}
                          >
                            PDF
                          </Button>
                          <Button
                            variant="outline-info"
                            size="sm"
                            onClick={() => downloadReport(report.id, 'csv')}
                          >
                            CSV
                          </Button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            </div>
          )}
        </Card.Body>
      </Card>

      {/* Create Report Modal */}
      <Modal show={showCreateModal} onHide={() => setShowCreateModal(false)} size="lg">
        <Modal.Header closeButton>
          <Modal.Title>Create New Report</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Report Title *</Form.Label>
              <Form.Control
                type="text"
                value={newReport.title}
                onChange={(e) => setNewReport({...newReport, title: e.target.value})}
                placeholder="Enter report title"
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={newReport.description}
                onChange={(e) => setNewReport({...newReport, description: e.target.value})}
                placeholder="Enter report description"
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Select Processes to Include *</Form.Label>
              <div style={{ maxHeight: '300px', overflowY: 'auto' }}>
                {processes.map((process) => (
                  <Form.Check
                    key={process.id}
                    type="checkbox"
                    id={`process-${process.id}`}
                    label={
                      <div className="d-flex justify-content-between align-items-center w-100">
                        <span>{process.process_name}</span>
                        <div>
                          <Badge 
                            bg={process.automation_suitability === 'highly_automatable' ? 'success' : 
                                process.automation_suitability === 'possibly_automatable' ? 'warning' : 'danger'}
                            className="me-2"
                          >
                            {process.total_score}/30
                          </Badge>
                          <small className="text-muted">{process.department}</small>
                        </div>
                      </div>
                    }
                    checked={newReport.selectedProcesses.includes(process.id)}
                    onChange={() => handleProcessSelection(process.id)}
                    className="mb-2 p-2 border rounded"
                  />
                ))}
              </div>
              {processes.length === 0 && (
                <p className="text-muted">No processes available. Create some assessments first.</p>
              )}
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowCreateModal(false)}>
            Cancel
          </Button>
          <Button variant="primary" onClick={createReport}>
            Create Report
          </Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default Reports;
